#ifndef CORAS_LOGNORMAL_POISSON_REALISATION_H
#define CORAS_LOGNORMAL_POISSON_REALISATION_H

#include <cstddef>
#include <functional>

#include <fftw3.h>
#include <gsl/gsl_rng.h>

#include "Cartesian1DGridFunction.hpp"
#include "SphericalGridFunction.hpp"

/**
 * \addtogroup RECONSTRUCTION
 * @{
 */

/**
 * \brief Class implementing the generation of random realizations of the log-normal density contrast, the linearly
 * related comoving peculiar velocity field, and the corresponding Poisson-sampled galaxy positions.
 * 
 * It uses Fast Fourier transforms (FFT) to generate the correlated random realizations efficiently.
 */
class LogNormalPoissonRealization
{
public:
  /**
	 * Constructor instantiating a generator of random signal and data realizations by setting up the periodic Cartesian
	 * box used for the FFT. The distance from the center to the boundary of the box along any of the three Cartesian
	 * directions is \a periodicBoundaryDistance and it is divided into \a binNumber equidistant bins.
	 *
	 * To avoid artifacts caused by the periodic boundary conditions, \a periodicBoundaryDistance should be chosen
	 * sufficiently larger than the maximal radius at which the signal and data realizations are to be evaluated. At the
	 * same time, the number of bins should be chosen large enough to resolve the required scales. Radius and smoothing
	 * scales of individual realizations will be specified in LogNormalPoissonRealization::generate and
	 * LogNormalPoissonRealization::get_fields.
	 */
  LogNormalPoissonRealization(double periodicBoundaryDistance, std::size_t binNumber);

  /**
	 * Generate a new random log-normal realization of the density contrast as well as a corresponding realization of the
	 * Poisson sampled galaxy distribution in a sphere of radius \a maxRadius. These are generated using the density
	 * contrast power spectrum \a densityContrastPowerSpectrum, the mean galaxy number density \a meanGalaxyDensity and
	 * the radial selection function \a selectionFunction. The required random numbers are generated by the GSL random
	 * number generator of type \a randomNumberGeneratorType (default: gsl_rng_ranlxd2) with seed \a
	 * randomNumberGeneratorSeed (default: 1) (see GSL documentation for details). To perform the transformation
	 * between density constrast and log-density, a Gaussian smoothing on the scale \a logTrafoSmoothingScale is
	 * performed. The spherical coordinates of the galaxies are written to \a mockGalaxyRadialCoordinates, \a
	 * mockGalaxyThetaCoordinates and \a mockGalaxyPhiCoordinates.
   *
   * The scale \a logTrafoSmoothingScale also sets the smoothing scale of the density field from which the galaxy
	 * distribution is sampled. too avoid biases, it should thus be chosen small compared to the smoothing scale that will
	 * be imposed on the fields in LogNormalPoissonRealization::get_fields.
	 */
  void generate(double maxRadius, const std::function<double(double)> &densityContrastPowerSpectrum, double meanGalaxyDensity, const std::function<double(double)> &selectionFunction, double logTrafoSmoothingScale,
                std::vector<double> &galaxyRadialCoordinatesRealization, std::vector<double> &galaxyThetaCoordinatesRealization, std::vector<double> &galaxyPhiCoordinatesRealization,
                std::size_t randomNumberGeneratorSeed = 1, const gsl_rng_type *randomNumberGeneratorType = gsl_rng_ranlxd2);

  /**
	 * Get the density contrast and peculiar velocity fields of the current realization. The velocity is computed from
	 * linear theory with normalized growth rate \a normalizedGrowthRate. Both fields are smoothed with a Gaussian on the
	 * scale \a fieldSmoothingScale and computed on a regular spherical grid with the maximal radius specified in the last
	 * execution of LogNormalPoissonRealization::generate, and \a radialBinNumber, \a thetaBinNumber and \a phiBinNumber
	 * bins on the radial, theta and phi axes, respectively. The density and the three spherical components of the
	 * velocity are written to \a densityContrastRealization, \a radialVelocityRealization, \a thetaVelocityRealization
	 * and \a phiVelocityRealization, respectively.
   *
   * The scale \a fieldSmoothingScale needs to be at least as large as the log-transform smoothing scale specified in
	 * the last execution of LogNormalPoissonRealization::generate. Ideally, it should be significantly larger
	 */
  void get_fields(double normalizedGrowthRate, double fieldSmoothingScale,
                  std::size_t radialBinNumber, std::size_t thetaBinNumber, std::size_t phiBinNumber,
                  SphericalGridFunction &densityContrastRealization, SphericalGridFunction &radialVelocityRealization, SphericalGridFunction &thetaVelocityRealization, SphericalGridFunction &phiVelocityRealization) const;

  /**
	 * Destructor freeing the arrays and plans used by the FFT.
   */
  ~LogNormalPoissonRealization();

private:
  /**
	 * Side length of the periodic Cartesian box used for the FFT.
   */
  double BoxLength;

  /**
	 * Number of bins used for the 1D FFT between power spectra and correlation functions.
   */
  int BinNumber1D;

  /**
	 * Number of bins per dimension used for the 3D FFT between density and velocity fields in real and Fourier space.
   */
  int BinNumber3D;

  /**
	 * Total number of points in the periodic Cartesian box used for the FFT.
   */
  int BoxPointNumber;

  /**
	 * Array containing the numbers of bins for each of the dimensions used for the 3D FFT between density and velocity
	 * fields in real and Fourier space. This is needed to create the 3D FFT plans.
   */
  int BinNumbers3D[3];

  /**
	 * Types of Discrete Cosine Transformations used to perform the 1D FFT between power spectra and correlation
	 * functions (see FFTW3 documentation for details).
   */
  fftw_r2r_kind FourierTrafoTypes1D[1];

  /**
	 * Real space bin width used for the 1D FFT between power spectra and correlation functions.
   */
  double RealBinWidth1D;

  /**
	 * Fourier space bin width used for the 1D FFT between power spectra and correlation functions.
   */
  double FourierBinWidth1D;

  /**
	 * Real space bin width used for the 3D FFT between density and velocity fields in real and Fourier space.
   */
  double RealBinWidth3D;

  /**
	 * Real space bin width used for the 3D FFT between density and velocity fields in real and Fourier space.
   */
  double FourierBinWidth3D;

  /**
	 * Normalization used for the backward 1D FFT from power spectra to correlation functions.
   */
  double BackwardTrafoNormalization1D;

  /**
	 * Normalization used for the forward 1D FFT from correlation functions to power spectra.
   */
  double ForwardTrafoNormalization1D;

  /**
	 * Normalization used for the backward 3D FFT of density and velocity fields from Fourier to real space.
   */
  double BackwardTrafoNormalization3D;

  /**
	 * Normalization used for the forward 3D FFT of density and velocity fields from real to Fourier space.
   */
  double ForwardTrafoNormalization3D;

  /**
	 * Array containing the spectrum for the 1D FFT.
   */
  double *Spectrum;

  /**
	 * Array containing the density field for the 3D FFT.
   */
  fftw_complex *Density;

  /**
	 * Array containing the current log-normal realization of the density field, smoothed on the scale
	 * LogNormalPoissonRealization::CurrentLogTrafoSmoothingScale.
   */
  fftw_complex *CurrentDensityRealization;

  /**
	 * Array containing the components of the velocity field for the 3D FFT.
   */
  fftw_complex *Velocity;

  /**
	 * 1D FFT plan used to backward transform power spectra to correlation functions (see FFTW3 documentation for
	 * details).
   */
  fftw_plan BackwardTrafoPlan1D;

  /**
	 * 1D FFT plan used to forward transform correlation functions to power spectra (see FFTW3 documentation for
	 * details).
   */
  fftw_plan ForwardTrafoPlan1D;

  /**
	 * 3D FFT plan used to backward transform the density fields from Fourier to real space (see FFTW3 documentation for
	 * details).
   */
  fftw_plan DensityBackwardTrafoPlan3D;

  /**
	 * 3D FFT plan used to forward transform the density fields from real to Fourier space (see FFTW3 documentation for
	 * details).
   */
  fftw_plan DensityForwardTrafoPlan3D;

  /**
	 * 3D FFT plan used to backward transform the velocity field from Fourier to real space (see FFTW3 documentation for
	 * details).
   */
  fftw_plan VelocityBackwardTrafoPlan3D;

  /**
	 * Maximal radius of the current realization.
   */
  double CurrentMaxRadius;

  /**
	 * Smoothing scale used for the log-transform in the current realization.
   */
  double CurrentLogTrafoSmoothingScale;

  /**
	 * Return the 1D real space coordinate at bin \a bin.
   */
  double real_coordinate_1D(int bin) const;

  /**
	 * Return the 1D Fourier space coordinate at bin \a bin.
   */
  double fourier_coordinate_1D(int bin) const;

  /**
	 * Return the 3D real space coordinate for any of the Cartesian directions at bin \a bin.
   */
  double real_coordinate_3D(int bin) const;

  /**
	 * Return the 3D Fourier space coordinate for any of the Cartesian directions at bin \a bin.
   */
  double fourier_coordinate_3D(int bin) const;
};

/** @} */

#endif